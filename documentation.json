{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-795e70b2ecfcba7ade4e7f1240f721cf",
            "file": "src/app/core/authentication/store/app.states.ts",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { User } from 'src/app/shared/models/user.model';\r\nimport * as auth from './reducers/auth.reducer';\r\n\r\n\r\nexport interface AppState{\r\n    authState: auth.State;\r\n    allUsers:User[];\r\n}\r\n\r\nexport const reducers = {\r\n    auth: auth.authReducer\r\n};\r\n\r\nexport const selectAuthState = createFeatureSelector<AppState>('auth');\r\n\r\nexport const selectAllUsers = (state:AppState) => state.allUsers;\r\n\r\n// export const selectAuthUsers = createSelector()\r\n\r\n\r\nexport const selectUsers = createSelector(\r\n    selectAllUsers,\r\n    (allUsers) => { return allUsers}\r\n    \r\n  );",
            "properties": [
                {
                    "name": "allUsers",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-3644ebd849b7c5f253e115f29d3db1db",
            "file": "src/app/core/authentication/store/reducers/auth.reducer.ts",
            "type": "interface",
            "sourceCode": "import { state } from '@angular/animations';\nimport { Action, createReducer, on } from '@ngrx/store';\nimport { User } from 'src/app/shared/models/user.model';\nimport * as AllAuthActions from '../actions/auth.actions'\n\nexport const authFeatureKey = 'auth';\n\nexport interface State {\n  isAuthenticated?: boolean;\n  userDetails?: User | null;\n  message?: string | null;\n}\n\nexport const initialState: State = {\n  isAuthenticated: false,\n  userDetails: null,\n  message: null\n};\n\n\nexport const authReducer = createReducer(\n  initialState,\n\n  on(AllAuthActions.allUsers, (state, action:any)=>{ return { ...state, userDetails: action.data }}),\n\n  on(AllAuthActions.auths, (state, action)=>{ return { ...state, userDetails: action.data }}),\n\n  on(AllAuthActions.authSuccess, (state, action)=>{ return { ...state, isAuthenticated:true, userDetails: action.data }}),\n\n  on(AllAuthActions.authFailure, (state, action)=>{ return { ...state, isAuthenticated:false, userDetails: null }})\n);\n\n",
            "properties": [
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "message",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "userDetails",
                    "type": "User | null",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-fc9422c6cc31a707350b1e3b9655ec84",
            "file": "src/app/core/authentication/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "getAllUser$",
                    "defaultValue": "createEffect(() => \n    this.actions$.pipe(\n      ofType(AllAuthActions.allUsers),\n      mergeMap( action => \n          this.authenticationService.getAllUserDetail().\n          pipe(\n              map((data:User[]) => {\n                return AllAuthActions.allUsersSuccess({ data })\n              }),\n              catchError((error)=>{\n                return of(AllAuthActions.allUsersFailure(error)); \n              })\n          )  \n      )\n      //getAllUserDetail      \n    )\n  )",
                    "type": "Observable<Action>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "Login$",
                    "defaultValue": "createEffect(() =>\n  this.actions$.pipe(\n    ofType(AllAuthActions.auths),\n    mergeMap(action =>\n\n        this.authenticationService.login(action.data)\n        \n        // this.authenticationService.getUserDetail(action.data)\n        // this.authenticationService.getAllUserDetail().\n        .pipe(\n          map((data) => {\n           /*  this.getAllUser$.subscribe((response:any)=>{\n              console.log(\" response ::::>>>\", response );\n            }) */\n            // let finalArr = [] = data.filter((x:any)=> x.email == action.data.email)\n            // if(finalArr.length > 0){\n            //   return AllAuthActions.authSuccess({ finalArr[0] });              \n            // } \n            // this.authenticationService.login(action.data)._\n            if(data.length > 0){\n              alert(\"login successfully\")\n              this.router.navigate(['/app/home']);\n              return AllAuthActions.authSuccess({ data });\n              \n            }else{\n              return AllAuthActions.authFailure( data );\n            }\n\n          }),\n          catchError((error) => {\n            return of(AllAuthActions.authFailure(error));\n          })\n        )\n    )\n  )\n)",
                    "type": "Observable<Action>",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { AuthenticationService } from '../../authentication.service';\nimport * as AllAuthActions from '../actions/auth.actions';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { User } from 'src/app/shared/models/user.model';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class AuthEffects {\n\n  constructor(private actions$: Actions,\n              private http: HttpClient,\n              private router: Router,\n              private authenticationService:AuthenticationService) {}\n\n  getAllUser$: Observable<Action> = createEffect(() => \n    this.actions$.pipe(\n      ofType(AllAuthActions.allUsers),\n      mergeMap( action => \n          this.authenticationService.getAllUserDetail().\n          pipe(\n              map((data:User[]) => {\n                return AllAuthActions.allUsersSuccess({ data })\n              }),\n              catchError((error)=>{\n                return of(AllAuthActions.allUsersFailure(error)); \n              })\n          )  \n      )\n      //getAllUserDetail      \n    )\n  )\n\n  Login$: Observable<Action> = createEffect(() =>\n  this.actions$.pipe(\n    ofType(AllAuthActions.auths),\n    mergeMap(action =>\n\n        this.authenticationService.login(action.data)\n        \n        // this.authenticationService.getUserDetail(action.data)\n        // this.authenticationService.getAllUserDetail().\n        .pipe(\n          map((data) => {\n           /*  this.getAllUser$.subscribe((response:any)=>{\n              console.log(\" response ::::>>>\", response );\n            }) */\n            // let finalArr = [] = data.filter((x:any)=> x.email == action.data.email)\n            // if(finalArr.length > 0){\n            //   return AllAuthActions.authSuccess({ finalArr[0] });              \n            // } \n            // this.authenticationService.login(action.data)._\n            if(data.length > 0){\n              alert(\"login successfully\")\n              this.router.navigate(['/app/home']);\n              return AllAuthActions.authSuccess({ data });\n              \n            }else{\n              return AllAuthActions.authFailure( data );\n            }\n\n          }),\n          catchError((error) => {\n            return of(AllAuthActions.authFailure(error));\n          })\n        )\n    )\n  )\n);\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-2c467410ce7823a84449f36d231521a4",
            "file": "src/app/core/authentication/authentication.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllUserDetail",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "getUserDetail",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "data",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "data",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { from, Observable } from 'rxjs';\nimport { User } from 'src/app/shared/models/user.model';\nimport { environment } from '../../../environments/environment'; \n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n  constructor(private http: HttpClient) { }\n\n  set userDetails(data:any){\n    \n  }\n\n  login(data: User) : Observable<any>{\n    return this.http.get(environment.baseUrl + '/users?email='+ data.email + '&password=' + data.password);\n  }\n\n  getUserDetail(id:any) : Observable<any>{\n    return this.http.get(environment.baseUrl + '/users/'+ id);\n  }\n\n  getAllUserDetail() : Observable<any>{\n    return this.http.get(environment.baseUrl + '/users');\n  }\n\n\n  register(data: User): Observable<any>{\n    return this.http.post(environment.baseUrl + '/users', data);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userDetails": {
                    "name": "userDetails",
                    "setSignature": {
                        "name": "userDetails",
                        "type": "void",
                        "args": [
                            {
                                "name": "data",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "CommonService",
            "id": "injectable-CommonService-9d7adf8abe037db2c6b98eaa633e7a08",
            "file": "src/app/shared/services/common.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommonService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-ab0772dd9e0a652d878d119a2301ab6a",
            "file": "src/app/shared/models/user.model.ts",
            "type": "class",
            "sourceCode": "export class User {\n    fname: string;\n    lname: string;\n    email:string;\n    mobile:string;\n    password:string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "fname",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lname",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "mobile",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d8d16030989236a49cf558b282021541",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'assignment'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'assignment';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\n<!-- * * * * * * * * * * and can be replaced. * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * Delete the template below * * * * * * * * * * -->\n<!-- * * * * * * * to get started with your project! * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * The content above * * * * * * * * * * * -->\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\n<!-- * * * * * * * * * * and can be replaced. * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * End of Placeholder * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n\n\n<router-outlet></router-outlet>"
        },
        {
            "name": "AuthLayoutComponent",
            "id": "component-AuthLayoutComponent-e7a9aa1e43efad04560c34f30dac4b0f",
            "file": "src/app/core/authentication/auth-layout/auth-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth-layout",
            "styleUrls": [
                "./auth-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auth-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-auth-layout',\n  templateUrl: './auth-layout.component.html',\n  styleUrls: ['./auth-layout.component.scss']\n})\nexport class AuthLayoutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./auth-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "FeatureComponent",
            "id": "component-FeatureComponent-4125f5b5f4ada008ea63be4c609a76bc",
            "file": "src/app/feature/feature.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-feature",
            "styleUrls": [
                "./feature.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feature.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-feature',\n  templateUrl: './feature.component.html',\n  styleUrls: ['./feature.component.scss']\n})\nexport class FeatureComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-4-column{\r\n    grid-template-columns: auto auto auto auto auto auto;   \r\n    grid-column-gap:10px;\r\n    align-items: center;\r\n    background-image: url('../../assets/images/background.jfif');\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    \r\n}\r\n\r\n.grid-item{\r\n    grid-column: 2/6;\r\n    border-left: 1px solid #e4e4e4;\r\n    border-right: 1px solid #e4e4e4;\r\n    background: #ffffff;\r\n    height: 100vh;\r\n    opacity: 0.85;\r\n}\r\n",
                    "styleUrl": "./feature.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<div class=\"grid-container grid-4-column\">\r\n    <div class=\"grid-item\">\r\n        <app-header></app-header>\r\n        <router-outlet></router-outlet>\r\n    </div>\r\n</div>"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-868f3962f21c76b835aad91a76be5501",
            "file": "src/app/core/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>footer works!</p>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-e9c2ebf83adc3ab7df90e20828d37e77-1",
            "file": "src/app/core/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { RouterLinkActive } from '@angular/router';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".logoImgDiv{\r\n    display: inline-block;\r\n}\r\n.logoImg{\r\n    height:50px;\r\n}\r\n\r\n.grid-6-column{\r\n    grid-template-columns: auto auto auto auto auto auto;   \r\n    grid-gap:10px; \r\n}\r\n\r\n.grid-logo-item{\r\n    grid-column: 1 / 5;\r\n}\r\n\r\n.headerDiv{\r\n    padding: 10px 15px;\r\n    border-bottom: 1px solid #e4e4e4;\r\n  /*   background: cornflowerblue; */\r\n}\r\n\r\n.headerLink{\r\n    a{\r\n        color: black;\r\n        font-weight: 700;\r\n        text-decoration: none;\r\n    }\r\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div class=\"grid-container grid-6-column headerDiv\">\n       <div class=\"grid-logo-item\">\n            <div class=\"logoImgDiv\">\n                <img src=\"../../../assets/images/music.jpg\" class=\"logoImg\" alt=\"\">\n            </div>\n       </div> \n       <div class=\"grid-item-1\">\n            <div class=\"headerLink text-right\">\n                <a class=\"appFont\" routerLink=\"/app/home\"  routerLinkActive=\"active-link\">Home</a>\n            </div>\n       </div>  \n       <div class=\"grid-item-2\">\n            <div class=\"headerLink text-center\">\n                <a class=\"appFont\" routerLink=\"/login\"  routerLinkActive=\"active-link\">Login</a>\n            </div>\n       </div>     \n</div>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-0368ba31f32dcbd90cb54a0bd661b89c",
            "file": "src/app/feature/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.grid-4-column{\r\n    grid-template-columns: auto auto auto auto;   \r\n    grid-column-gap:10px;\r\n    align-items: center;\r\n    grid-template-rows: 80px;\r\n}\r\n\r\n.grid-3-column{\r\n    grid-template-columns: auto auto auto ;   \r\n    grid-column-gap:10px;\r\n    align-items: center;\r\n}\r\n\r\n.ml-5{\r\n    margin-left:5px;\r\n}\r\n.grid-item{\r\n    grid-column: 2/4;\r\n}\r\n.grid-item-1-3{\r\n    grid-column: 3/12;\r\n}\r\n\r\n.grid-6-column{\r\n    grid-template-rows: 100%;\r\n    grid-template-columns: auto auto auto auto auto auto;\r\n}\r\n\r\n.grid-table-item{\r\n    grid-column: 2/6;\r\n}\r\n\r\n.tableDiv{\r\n    height: 400px;\r\n}\r\n\r\n.tableLbls{\r\n    position: absolute;\r\n    top: 33%;\r\n    left: 20%;\r\n}\r\n/* \r\n.grid-item-2{\r\n    grid-column: 2/6;\r\n} */",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container mb-15 grid-4-column appFont border-bot\">\n    <div class=\"grid-item-1\">\n        <!-- <div class=\"\"> -->\n            <div class=\" grid-container mb-0px  form-element grid-3-column\">\n                <div class=\"grid-item-1-1 text-right dispInlineBlock\">\n                     <label >Filter</label>\n                </div>\n                 \n                 <div class=\"grid-item-1-2\">\n                    <div class=\" ml-5 dispInlineBlock\">\n                        <img src=\"../../../assets/images/filter.png\" style=\"height: 20px;\" alt=\"\">\n                    </div>\n                 </div>\n                 <div class=\"grid-item-1-3\">\n                    <div class=\"dispInlineBlock\">\n                        <select name=\"filter\" class=\"ml-5\">\n                            <option value=\"all\">All Songs</option>\n                            <option value=\"party\">Party Songs</option>\n                            <option value=\"old\">Old Songs</option>\n                            <option value=\"love\">Love Songs</option>\n                            <!-- <option value=\"rock\">Rock Songs</option> -->\n                        </select>\n                    </div>\n                 </div>\n             </div>\n        <!-- </div> -->\n    </div>\n    <div class=\"grid-item-2\">\n        <div class=\"form-element mb-0px text-center\">\n            <input type=\"text\" class=\"w-80\" placeholder=\"Search song\">\n        </div>\n    </div>\n    \n</div>\n\n<div class=\"grid-container grid-6-column appFont\">\n    <div class=\"grid-table-item\">\n        <div class=\"tableDiv\">\n            <table class=\"w-100 appFont\">\n                <tbody>\n                    <tr>\n                        <td>\n                            <div class=\"posRel\">\n                                <div class=\"dispInlineBlock\">\n                                    <img src=\"../../../assets/images/background.jfif\" style=\"height: 60px;width: 80px;\" alt=\"\">\n                                </div>\n                                <div class=\"dispInlineBlock ml-5 tableLbls\">\n                                    <span class=\"songNameStyle\"> sample music tone.mp3</span>\n                                </div>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                             <div class=\"posRel\">\n                                 <div class=\"dispInlineBlock\">\n                                     <img src=\"../../../assets/images/guitar.jfif\" style=\"height: 60px;width: 80px;\" alt=\"\">\n                                 </div>\n                                 <div class=\"dispInlineBlock ml-5 tableLbls\">\n                                     <span class=\"songNameStyle\"> test music tone.mp3</span>\n                                 </div>\n                             </div>\n                         </td>\n                    </tr>\n                </tbody>\n                \n            </table>\n        </div>\n\n    </div>\n\n</div>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-8370d3d90f284b5eeec1be49e4eedaef",
            "file": "src/app/feature/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "type": "AuthenticationService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "checkPasswordFlag",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "currentAuthState",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "formbuilder",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getAllUser$",
                    "type": "Observable<any[]>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "getState$",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isLogin",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "registrationForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "userDetails$",
                    "type": "Observable<any[]>",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "checkPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "registerUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { select, Store } from '@ngrx/store';\nimport { AuthenticationService } from 'src/app/core/authentication/authentication.service';\nimport { AppState, selectAuthState, selectUsers } from 'src/app/core/authentication/store/app.states';\nimport { User } from 'src/app/shared/models/user.model';\nimport { LoginModule } from './login.module';\nimport * as AllAuthActions from '../../core/authentication/store/actions/auth.actions';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  checkPasswordFlag:boolean;\n  loginForm: FormGroup;\n  registrationForm:FormGroup;\n  isLogin: boolean = true;\n  user: User;\n\n  getState$:Observable<any>;\n  userDetails$: Observable<any[]>;\n  getAllUser$: Observable<any[]>;\n  currentAuthState:any = {};\n\n  constructor(public formbuilder: FormBuilder, \n              public authService:AuthenticationService, \n              public router:Router,\n              private store: Store<AppState>) {\n                this.getState$ = this.store.select(selectAuthState)\n\n                this.store.dispatch(AllAuthActions.allUsers())\n                this.userDetails$ = this.store.select(selectUsers);\n              }\n\n  ngOnInit(): void {\n    this.loginForm = this.formbuilder.group({\n       email:['', Validators.required],\n       password: ['', Validators.required]\n    });\n\n    this.registrationForm = this.formbuilder.group({\n      fname:['', Validators.required],\n      lname:['', Validators.required],\n      email:['', Validators.required],\n      mobile: ['', Validators.required],\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required ],\n      \n   })\n\n   this.getState$.subscribe((state) => {\n    console.log(\"state ::::>>>>\", state)\n    this.currentAuthState = state;\n  });\n\n  this.getUsers();\n  }\n\n  getUsers(){\n\n\n    this.userDetails$.subscribe((allUsers)=>{\n      console.log(\" this.userDetails =====>\", allUsers);\n    })\n  }\n\n  login(){\n   console.log( \"Login\", this.loginForm.value);\n   this.store.dispatch(AllAuthActions.auths({ data: this.loginForm.value}))\n    console.log(\"this.currentAuthState.auth.isAuthenticated ::\", this.currentAuthState.auth.isAuthenticated);\n    \n   /* if(this.currentAuthState.auth.isAuthenticated){\n    this.router.navigate(['/app/home']);\n   }  */ \n\n  }\n\n  registerUser(){\n    this.router.navigate(['/app/home']);\n     this.user = this.registrationForm.value;\n    console.log( \"register\", this.user );\n    this.authService.register(this.user).subscribe(\n      (response)=>{\n        console.log(\" Registered Successfully\", response)\n      })\n   }\n\n   checkPassword(){\n     if(this.registrationForm.controls[\"password\"].value === this.registrationForm.controls[\"confirmPassword\"].value){\n      this.checkPasswordFlag = false;\n     }else{\n       this.checkPasswordFlag = true;\n     }\n   }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// $btnColor: #5dccfb;\r\n\r\n@mixin btnColor($color) {\r\n    padding: 13px;\r\n    background: $color;\r\n    border: none;\r\n    color: #ffffff;\r\n    font-weight: 700;\r\n}\r\n\r\n.grid-3-column{\r\n    grid-template-columns: auto auto auto;   \r\n    grid-gap:10px;\r\n    grid-template-rows: calc(100vh - 18px); \r\n}\r\n\r\n.loginDiv, .registrationDiv{\r\n   /*  grid-column: 1 / 3; */\r\n    justify-self: center;\r\n    padding: 40px 30px;\r\n    border: 1px solid #a8a8a8;\r\n    border-radius: 5px;\r\n}\r\n\r\n.loginBtn{\r\n   @include btnColor(#5dccfb);\r\n}\r\n\r\n.registrationBtn{\r\n    @include btnColor(#eb7c78);\r\n }\r\n\r\n.registrationLink{\r\n    color: cornflowerblue;\r\n    font-weight: 700;\r\n    text-decoration: underline;\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n.mainDiv{\r\n    background-image: url(\"../../../assets/images/guitar.jfif\");\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formbuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "authService",
                        "type": "AuthenticationService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "formbuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container grid-3-column mainDiv\">\n    <div class=\"loginDiv appFont\" *ngIf=\"isLogin\">\n        <form action=\"\" name=\"loginForm\" [formGroup]=\"loginForm\">\n            <div class=\"grid-item\">\n                <div class=\"form-element text-center\">\n                    <h1 class=\"whiteColor\">Login</h1>\n                </div>\n            </div>\n\n            <div class=\"grid-item\">\n                <div class=\"form-element\">\n                    <input type=\"text\" name=\"email\" formControlName=\"email\" placeholder=\"Enter email id\">\n                </div>\n            </div>\n            <div class=\"grid-item\">\n                <div class=\"form-element mb-25\">\n                    <input type=\"password\" name=\"password\" formControlName=\"password\" placeholder=\"Enter password\">\n                </div>\n            </div>\n\n            <div class=\"grid-item\">\n                <div class=\"form-element\">\n                    <button type=\"button\" [disabled]=\"!loginForm.valid\" (click)=\"login()\" class=\"loginBtn w-100\">Login</button>\n                </div>\n            </div>\n\n            <div class=\"grid-item\">\n                <div class=\"form-element \">\n                     <a class=\"font-16 registrationLink\" (click)=\"isLogin = false;\"> Registration</a> \n                </div>\n            </div>\n        </form>\n    </div>\n\n    <div class=\"registrationDiv appFont\" *ngIf=\"!isLogin\">\n        <form name=\"registrationForm\" [formGroup]=\"registrationForm\">\n            <div class=\"grid-item\">\n                <div class=\"form-element text-center\">\n                    <h1 class=\"whiteColor\">Registration</h1>\n                </div>\n            </div>\n\n            <div class=\"grid-item\">\n                <div class=\"form-element\">\n                    <input type=\"email\" class=\"w-85\" name=\"fname\" formControlName=\"fname\" placeholder=\"Enter first name\">\n                </div>\n            </div>\n\n            <div class=\"grid-item\">\n                <div class=\"form-element\">\n                    <input type=\"text\" class=\"w-85\" name=\"lname\" formControlName=\"lname\" placeholder=\"Enter last name\">\n                </div>\n            </div>\n            \n            <div class=\"grid-item\">\n                <div class=\"form-element\">\n                    <input type=\"text\" class=\"w-85\" name=\"email\" formControlName=\"email\" placeholder=\"Enter email id\">\n                </div>\n            </div>\n            \n            <div class=\"grid-item\">\n                <div class=\"form-element mb-25\">\n                    <input type=\"text\" class=\"w-85\" name=\"mobile\" maxlength=\"10\" minlength=\"10\"\n                     formControlName=\"mobile\" placeholder=\"Enter mobile no.\">\n                </div>\n            </div>\n\n            <div class=\"grid-item\">\n                <div class=\"form-element mb-25\">\n                    <input type=\"password\" class=\"w-85\" name=\"mobile\" maxlength=\"10\" minlength=\"10\"\n                     formControlName=\"password\" placeholder=\"Enter password\">\n                </div>\n            </div>\n\n            <div class=\"grid-item\">\n                <div class=\"form-element mb-25\">\n                    <input type=\"password\" class=\"w-85\" (keyup)=\"checkPassword()\" name=\"mobile\" maxlength=\"10\" minlength=\"10\"\n                     formControlName=\"confirmPassword\" placeholder=\"Enter confirm password\">\n                </div>\n            </div>\n\n            <div class=\"grid-item\">\n                <div class=\"form-element\">\n                    <button type=\"button\" (click)=\"registerUser()\" class=\"registrationBtn w-100\">Registration</button>\n                </div>\n            </div>\n\n            <div *ngIf=\"checkPasswordFlag\">\n                <span style=\"color:#ffffff; font-size:16px\"> Password & Confirm password should be same </span>\n            </div>\n\n        </form>\n    </div>\n</div>\n\n\n<!-- <div>\n    <audio controls>\n        <source src=\"https://instrumentalfx.co/wp-content/upload/11/Mission-Impossible.mp3\" type=\"audio/ogg\">\n        <source src=\"https://instrumentalfx.co/wp-content/upload/11/Mission-Impossible.mp3\" type=\"audio/mpeg\">\n      Your browser does not support the audio element.\n      </audio>\n</div> -->"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-e4854427590efc9cdba084524147e2bd",
            "file": "src/app/feature/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile",
            "styleUrls": [
                "./profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>profile works!</p>\n"
        },
        {
            "name": "SongManagementComponent",
            "id": "component-SongManagementComponent-b9f60f885502efcf4653894440ee5a5b",
            "file": "src/app/feature/song-management/song-management.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-song-management",
            "styleUrls": [
                "./song-management.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./song-management.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-song-management',\n  templateUrl: './song-management.component.html',\n  styleUrls: ['./song-management.component.scss']\n})\nexport class SongManagementComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./song-management.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>song-management works!</p>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "AuthLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthLayoutComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FeatureModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FeatureComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        },
                        {
                            "name": "SongManagementComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FeatureRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FeatureRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LoginRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "allUsers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/authentication/store/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth] Load Users',\n)"
            },
            {
                "name": "allUsersFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/authentication/store/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth] Load Users Failure',\n  props<{ error: any }>()\n)"
            },
            {
                "name": "allUsersSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/authentication/store/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth] Load Users Success',\n props<{ data:User[] }>()\n)"
            },
            {
                "name": "authFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/authentication/store/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth] Login Failure',\n  props<{ error: any }>()\n)"
            },
            {
                "name": "authFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/authentication/store/reducers/auth.reducer.ts",
                "type": "string",
                "defaultValue": "'auth'"
            },
            {
                "name": "authReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/authentication/store/reducers/auth.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n\n  on(AllAuthActions.allUsers, (state, action:any)=>{ return { ...state, userDetails: action.data }}),\n\n  on(AllAuthActions.auths, (state, action)=>{ return { ...state, userDetails: action.data }}),\n\n  on(AllAuthActions.authSuccess, (state, action)=>{ return { ...state, isAuthenticated:true, userDetails: action.data }}),\n\n  on(AllAuthActions.authFailure, (state, action)=>{ return { ...state, isAuthenticated:false, userDetails: null }})\n)"
            },
            {
                "name": "auths",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/authentication/store/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth] Login',\n  props<{ data:any }>()\n)"
            },
            {
                "name": "authSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/authentication/store/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth] Login Success',\n  props<{ data: User }>()\n)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n\n  baseUrl: \"http://localhost:3000\"\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/authentication/store/reducers/auth.reducer.ts",
                "type": "State",
                "defaultValue": "{\n  isAuthenticated: false,\n  userDetails: null,\n  message: null\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/authentication/store/app.states.ts",
                "type": "object",
                "defaultValue": "{\r\n    auth: auth.authReducer\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAllUsers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/authentication/store/app.states.ts",
                "type": "",
                "defaultValue": "(state:AppState) => state.allUsers"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/authentication/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "selectUsers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/authentication/store/app.states.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectAllUsers,\r\n    (allUsers) => { return allUsers}\r\n    \r\n  )"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[Auth] Login"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Auth] Login Success"
                    },
                    {
                        "name": "LOGIN_FAILED",
                        "value": "[Auth] Login Failed"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/core/authentication/store/actions/temp.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/core/authentication/store/actions/auth.actions.ts": [
                {
                    "name": "allUsers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/authentication/store/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth] Load Users',\n)"
                },
                {
                    "name": "allUsersFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/authentication/store/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth] Load Users Failure',\n  props<{ error: any }>()\n)"
                },
                {
                    "name": "allUsersSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/authentication/store/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth] Load Users Success',\n props<{ data:User[] }>()\n)"
                },
                {
                    "name": "authFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/authentication/store/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth] Login Failure',\n  props<{ error: any }>()\n)"
                },
                {
                    "name": "auths",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/authentication/store/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth] Login',\n  props<{ data:any }>()\n)"
                },
                {
                    "name": "authSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/authentication/store/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth] Login Success',\n  props<{ data: User }>()\n)"
                }
            ],
            "src/app/core/authentication/store/reducers/auth.reducer.ts": [
                {
                    "name": "authFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/authentication/store/reducers/auth.reducer.ts",
                    "type": "string",
                    "defaultValue": "'auth'"
                },
                {
                    "name": "authReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/authentication/store/reducers/auth.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n\n  on(AllAuthActions.allUsers, (state, action:any)=>{ return { ...state, userDetails: action.data }}),\n\n  on(AllAuthActions.auths, (state, action)=>{ return { ...state, userDetails: action.data }}),\n\n  on(AllAuthActions.authSuccess, (state, action)=>{ return { ...state, isAuthenticated:true, userDetails: action.data }}),\n\n  on(AllAuthActions.authFailure, (state, action)=>{ return { ...state, isAuthenticated:false, userDetails: null }})\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/authentication/store/reducers/auth.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\n  isAuthenticated: false,\n  userDetails: null,\n  message: null\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n\n  baseUrl: \"http://localhost:3000\"\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/app/core/authentication/store/app.states.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/authentication/store/app.states.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    auth: auth.authReducer\r\n}"
                },
                {
                    "name": "selectAllUsers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/authentication/store/app.states.ts",
                    "type": "",
                    "defaultValue": "(state:AppState) => state.allUsers"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/authentication/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                },
                {
                    "name": "selectUsers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/authentication/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectAllUsers,\r\n    (allUsers) => { return allUsers}\r\n    \r\n  )"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/core/authentication/store/actions/temp.actions.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[Auth] Login"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Auth] Login Success"
                        },
                        {
                            "name": "LOGIN_FAILED",
                            "value": "[Auth] Login Failed"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/core/authentication/store/actions/temp.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "app/home",
                        "pathMatch": "full"
                    },
                    {
                        "path": "",
                        "component": "AuthLayoutComponent",
                        "children": [
                            {
                                "path": "login",
                                "loadChildren": "./feature/login/login.module#LoginModule",
                                "canActivate": [
                                    "UnauthorizedAuthGuard"
                                ],
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/feature/login/login-routing.module.ts",
                                                "module": "LoginRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "LoginComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "LoginModule"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "path": "",
                        "component": "FeatureComponent",
                        "children": [
                            {
                                "path": "app",
                                "loadChildren": "./feature/feature.module#FeatureModule",
                                "canActivate": [
                                    "AuthGuard"
                                ],
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/feature/feature-routing.module.ts",
                                                "module": "FeatureRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "home",
                                                        "component": "HomeComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "FeatureModule"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/auth-layout/auth-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/authentication.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allUsers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allUsersFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allUsersSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "auths",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/app.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllUsers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUsers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/reducers/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/store/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guard/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guard/unauthorized-auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "UnauthorizedAuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/feature.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeatureComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/song-management/song-management.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SongManagementComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/user.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/common.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommonService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}